/*
 *-------------------------------------  
 * PlasmidAMRFinder MAIN CONFIGURATION
 *-------------------------------------
 * Default config for all environments
 */


manifest {
    mainScript = 'main.nf'
    author = 'Victoria Cepeda'
    homePage = 'https://github.com/vcepeda/PlasmidAMRFinder'
    description = 'pipeline for plasmid and AMR identification, modified from PlasmidIdent'
    name = 'PlasmidAMRFinder'
    nextflowVersion = '>=22.10.0'
    version = '0.7'
}

// Default parameters
params {
    version = false
    help = false
}

process.container = 'caspargross/plasmident'

// Include base configuration for all pipelines
includeConfig 'conf/base.config'

profiles {   

    conda { process.conda = "$baseDir/env/PI_env.yml"}
    docker {
        docker.enabled = true
        fixOwnership = true
     }
    singularity { singularity.enabled = true } 
    test { includeConfig 'conf/test.config' }
    app { includeConfig 'conf/app.config' }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

